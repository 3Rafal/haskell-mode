;; unit tests for haskell-str.el

(require 'ert)

(require 'haskell-str ) ;; implementation under test

(ert-deftest haskell-str-take ()
  (should (string= (haskell-str-take "" 0) ""))
  (should (string= (haskell-str-take "" 1) ""))
  (should (string= (haskell-str-take "" 2) ""))
  (should (string= (haskell-str-take "x" 0) ""))
  (should (string= (haskell-str-take "x" 1) "x"))
  (should (string= (haskell-str-take "x" 2) "x"))
  (should (string= (haskell-str-take "x" 3) "x"))
  (should (string= (haskell-str-take "xy" 0) ""))
  (should (string= (haskell-str-take "xy" 1) "x"))
  (should (string= (haskell-str-take "xy" 2) "xy"))
  (should (string= (haskell-str-take "xy" 3) "xy"))
  (should (string= (haskell-str-take "xyz" 0) ""))
  (should (string= (haskell-str-take "xyz" 1) "x"))
  (should (string= (haskell-str-take "xyz" 2) "xy"))
  (should (string= (haskell-str-take "xyz" 3) "xyz"))
  (should (string= (haskell-str-take "xyz" 4) "xyz")))

(ert-deftest haskell-str-ellipsize ()
  (should (string= (haskell-str-ellipsize "" 0) ""))
  (should (string= (haskell-str-ellipsize "" 1) ""))
  (should (string= (haskell-str-ellipsize "" 2) ""))
  (should (string= (haskell-str-ellipsize "x" 0) ""))
  (should (string= (haskell-str-ellipsize "x" 1) "x"))
  (should (string= (haskell-str-ellipsize "x" 2) "x"))
  (should (string= (haskell-str-ellipsize "x" 3) "x"))
  (should (string= (haskell-str-ellipsize "xy" 0) ""))
  (should (string= (haskell-str-ellipsize "xy" 1) "…"))
  (should (string= (haskell-str-ellipsize "xy" 2) "xy"))
  (should (string= (haskell-str-ellipsize "xy" 3) "xy"))
  (should (string= (haskell-str-ellipsize "xyz" 0) ""))
  (should (string= (haskell-str-ellipsize "xyz" 1) "…"))
  (should (string= (haskell-str-ellipsize "xyz" 2) "x…"))
  (should (string= (haskell-str-ellipsize "xyz" 3) "xyz"))
  (should (string= (haskell-str-ellipsize "xyz" 4) "xyz")))
